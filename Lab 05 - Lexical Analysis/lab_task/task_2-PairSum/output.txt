#include -> PREPROCESSOR
<stdio.h> -> HEADER_FILE
void -> VOID
findPairs -> ID
( -> LPAREN
int -> INT
arr -> ID
[ -> LBRACKET
] -> RBRACKET
, -> COMMA
int -> INT
size -> ID
, -> COMMA
int -> INT
target -> ID
) -> RPAREN
{ -> LBRACE
for -> FOR
( -> LPAREN
int -> INT
i -> ID
= -> ASSIGN
0 -> NUMBER
; -> SEMI
i -> ID
< -> UNKNOWN
size -> ID
; -> SEMI
i -> ID
++ -> INC
) -> RPAREN
{ -> LBRACE
for -> FOR
( -> LPAREN
int -> INT
j -> ID
= -> ASSIGN
i -> ID
+ -> ADD
1 -> NUMBER
; -> SEMI
j -> ID
< -> UNKNOWN
size -> ID
; -> SEMI
j -> ID
++ -> INC
) -> RPAREN
{ -> LBRACE
if -> IF
( -> LPAREN
arr -> ID
[ -> LBRACKET
i -> ID
] -> RBRACKET
+ -> ADD
arr -> ID
[ -> LBRACKET
j -> ID
] -> RBRACKET
== -> EQ
target -> ID
) -> RPAREN
{ -> LBRACE
printf -> PRINTF
( -> LPAREN
" -> UNKNOWN
Pair -> ID
found -> ID
: -> UNKNOWN
( -> LPAREN
% -> MOD
d -> ID
, -> COMMA
% -> MOD
d -> ID
) -> RPAREN
\ -> UNKNOWN
n -> ID
" -> UNKNOWN
, -> COMMA
arr -> ID
[ -> LBRACKET
i -> ID
] -> RBRACKET
, -> COMMA
arr -> ID
[ -> LBRACKET
j -> ID
] -> RBRACKET
) -> RPAREN
; -> SEMI
} -> RBRACE
} -> RBRACE
} -> RBRACE
} -> RBRACE
int -> INT
main -> MAIN
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> INT
arr -> ID
[ -> LBRACKET
] -> RBRACKET
= -> ASSIGN
{ -> LBRACE
2 -> NUMBER
, -> COMMA
4 -> NUMBER
, -> COMMA
3 -> NUMBER
, -> COMMA
5 -> NUMBER
, -> COMMA
7 -> NUMBER
} -> RBRACE
; -> SEMI
int -> INT
target -> ID
= -> ASSIGN
10 -> NUMBER
; -> SEMI
int -> INT
size -> ID
= -> ASSIGN
sizeof -> ID
( -> LPAREN
arr -> ID
) -> RPAREN
/ -> DIV
sizeof -> ID
( -> LPAREN
arr -> ID
[ -> LBRACKET
0 -> NUMBER
] -> RBRACKET
) -> RPAREN
; -> SEMI
findPairs -> ID
( -> LPAREN
arr -> ID
, -> COMMA
size -> ID
, -> COMMA
target -> ID
) -> RPAREN
; -> SEMI
return -> RETURN
0 -> NUMBER
; -> SEMI
} -> RBRACE
