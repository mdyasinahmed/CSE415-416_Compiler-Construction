#include -> PREPROCESSOR
<stdio.h> -> HEADER_FILE
#include -> PREPROCESSOR
<string.h> -> HEADER_FILE
int -> INT
max -> ID
( -> LPAREN
int -> INT
a -> ID
, -> COMMA
int -> INT
b -> ID
) -> RPAREN
{ -> LBRACE
return -> RETURN
( -> LPAREN
a -> ID
> -> GT
b -> ID
) -> RPAREN
? -> TERNARY_IF
a -> ID
: -> TERNARY_ELSE
b -> ID
; -> SEMI
} -> RBRACE
int -> INT
lcs -> ID
( -> LPAREN
char -> CHAR
* -> MUL
X -> ID
, -> COMMA
char -> CHAR
* -> MUL
Y -> ID
, -> COMMA
int -> INT
m -> ID
, -> COMMA
int -> INT
n -> ID
) -> RPAREN
{ -> LBRACE
int -> INT
L -> ID
[ -> LBRACKET
m -> ID
+ -> ADD
1 -> NUMBER
] -> RBRACKET
[ -> LBRACKET
n -> ID
+ -> ADD
1 -> NUMBER
] -> RBRACKET
; -> SEMI
for -> FOR
( -> LPAREN
int -> INT
i -> ID
= -> ASSIGN
0 -> NUMBER
; -> SEMI
i -> ID
<= -> LE
m -> ID
; -> SEMI
i -> ID
+ -> ADD
+ -> ADD
) -> RPAREN
{ -> LBRACE
for -> FOR
( -> LPAREN
int -> INT
j -> ID
= -> ASSIGN
0 -> NUMBER
; -> SEMI
j -> ID
<= -> LE
n -> ID
; -> SEMI
j -> ID
+ -> ADD
+ -> ADD
) -> RPAREN
{ -> LBRACE
if -> IF
( -> LPAREN
i -> ID
== -> EQ
0 -> NUMBER
|| -> OR
j -> ID
== -> EQ
0 -> NUMBER
) -> RPAREN
L -> ID
[ -> LBRACKET
i -> ID
] -> RBRACKET
[ -> LBRACKET
j -> ID
] -> RBRACKET
= -> ASSIGN
0 -> NUMBER
; -> SEMI
else -> ELSE
if -> IF
( -> LPAREN
X -> ID
[ -> LBRACKET
i -> ID
- -> SUB
1 -> NUMBER
] -> RBRACKET
== -> EQ
Y -> ID
[ -> LBRACKET
j -> ID
- -> SUB
1 -> NUMBER
] -> RBRACKET
) -> RPAREN
L -> ID
[ -> LBRACKET
i -> ID
] -> RBRACKET
[ -> LBRACKET
j -> ID
] -> RBRACKET
= -> ASSIGN
L -> ID
[ -> LBRACKET
i -> ID
- -> SUB
1 -> NUMBER
] -> RBRACKET
[ -> LBRACKET
j -> ID
- -> SUB
1 -> NUMBER
] -> RBRACKET
+ -> ADD
1 -> NUMBER
; -> SEMI
else -> ELSE
L -> ID
[ -> LBRACKET
i -> ID
] -> RBRACKET
[ -> LBRACKET
j -> ID
] -> RBRACKET
= -> ASSIGN
max -> ID
( -> LPAREN
L -> ID
[ -> LBRACKET
i -> ID
- -> SUB
1 -> NUMBER
] -> RBRACKET
[ -> LBRACKET
j -> ID
] -> RBRACKET
, -> COMMA
L -> ID
[ -> LBRACKET
i -> ID
] -> RBRACKET
[ -> LBRACKET
j -> ID
- -> SUB
1 -> NUMBER
] -> RBRACKET
) -> RPAREN
; -> SEMI
} -> RBRACE
} -> RBRACE
return -> RETURN
L -> ID
[ -> LBRACKET
m -> ID
] -> RBRACKET
[ -> LBRACKET
n -> ID
] -> RBRACKET
; -> SEMI
} -> RBRACE
int -> INT
main -> MAIN
( -> LPAREN
) -> RPAREN
{ -> LBRACE
char -> CHAR
X -> ID
[ -> LBRACKET
] -> RBRACKET
= -> ASSIGN
"AGGTAB" -> STRING_LITERAL
; -> SEMI
char -> CHAR
Y -> ID
[ -> LBRACKET
] -> RBRACKET
= -> ASSIGN
"GXTXAYB" -> STRING_LITERAL
; -> SEMI
int -> INT
m -> ID
= -> ASSIGN
strlen -> STRLEN
( -> LPAREN
X -> ID
) -> RPAREN
; -> SEMI
int -> INT
n -> ID
= -> ASSIGN
strlen -> STRLEN
( -> LPAREN
Y -> ID
) -> RPAREN
; -> SEMI
printf -> PRINTF
( -> LPAREN
"Length of LCS is %d\n" -> STRING_LITERAL
, -> COMMA
lcs -> ID
( -> LPAREN
X -> ID
, -> COMMA
Y -> ID
, -> COMMA
m -> ID
, -> COMMA
n -> ID
) -> RPAREN
) -> RPAREN
; -> SEMI
return -> RETURN
0 -> NUMBER
; -> SEMI
} -> RBRACE
