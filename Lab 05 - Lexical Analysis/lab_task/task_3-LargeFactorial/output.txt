#include -> PREPROCESSOR
<stdio.h> -> HEADER_FILE
void -> VOID
factorial -> ID
( -> LPAREN
int -> INT
n -> ID
) -> RPAREN
{ -> LBRACE
int -> INT
result -> ID
[ -> LBRACKET
1000 -> NUMBER
] -> RBRACKET
; -> SEMI
result -> ID
[ -> LBRACKET
0 -> NUMBER
] -> RBRACKET
= -> ASSIGN
1 -> NUMBER
; -> SEMI
int -> INT
result_size -> ID
= -> ASSIGN
1 -> NUMBER
; -> SEMI
for -> FOR
( -> LPAREN
int -> INT
x -> ID
= -> ASSIGN
2 -> NUMBER
; -> SEMI
x -> ID
<= -> LE
n -> ID
; -> SEMI
x -> ID
+ -> ADD
+ -> ADD
) -> RPAREN
{ -> LBRACE
int -> INT
carry -> ID
= -> ASSIGN
0 -> NUMBER
; -> SEMI
for -> FOR
( -> LPAREN
int -> INT
i -> ID
= -> ASSIGN
0 -> NUMBER
; -> SEMI
i -> ID
< -> LT
result_size -> ID
; -> SEMI
i -> ID
+ -> ADD
+ -> ADD
) -> RPAREN
{ -> LBRACE
int -> INT
prod -> ID
= -> ASSIGN
result -> ID
[ -> LBRACKET
i -> ID
] -> RBRACKET
* -> MUL
x -> ID
+ -> ADD
carry -> ID
; -> SEMI
result -> ID
[ -> LBRACKET
i -> ID
] -> RBRACKET
= -> ASSIGN
prod -> ID
% -> MOD
10 -> NUMBER
; -> SEMI
carry -> ID
= -> ASSIGN
prod -> ID
/ -> DIV
10 -> NUMBER
; -> SEMI
} -> RBRACE
while -> WHILE
( -> LPAREN
carry -> ID
) -> RPAREN
{ -> LBRACE
result -> ID
[ -> LBRACKET
result_size -> ID
] -> RBRACKET
= -> ASSIGN
carry -> ID
% -> MOD
10 -> NUMBER
; -> SEMI
carry -> ID
= -> ASSIGN
carry -> ID
/ -> DIV
10 -> NUMBER
; -> SEMI
result_size -> ID
+ -> ADD
+ -> ADD
; -> SEMI
} -> RBRACE
} -> RBRACE
for -> FOR
( -> LPAREN
int -> INT
i -> ID
= -> ASSIGN
result_size -> ID
- -> SUB
1 -> NUMBER
; -> SEMI
i -> ID
>= -> GE
0 -> NUMBER
; -> SEMI
i -> ID
- -> SUB
- -> SUB
) -> RPAREN
printf -> PRINTF
( -> LPAREN
" -> PUNCT
% -> MOD
d -> ID
" -> PUNCT
, -> COMMA
result -> ID
[ -> LBRACKET
i -> ID
] -> RBRACKET
) -> RPAREN
; -> SEMI
} -> RBRACE
int -> INT
main -> MAIN
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> INT
num -> ID
= -> ASSIGN
100 -> NUMBER
; -> SEMI
factorial -> ID
( -> LPAREN
num -> ID
) -> RPAREN
; -> SEMI
return -> RETURN
0 -> NUMBER
; -> SEMI
} -> RBRACE
