#include -> PREPROCESSOR
<stdio.h> -> HEADER_FILE
#include -> PREPROCESSOR
<math.h> -> HEADER_FILE
int -> INT
main -> MAIN
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> INT
num -> ID
= -> ASSIGN
153 -> NUMBER
, -> UNKNOWN
originalNum -> ID
, -> UNKNOWN
remainder -> ID
, -> UNKNOWN
n -> ID
= -> ASSIGN
0 -> NUMBER
; -> SEMI
float -> FLOAT
result -> ID
= -> ASSIGN
0.0 -> FLOAT_NUM
; -> SEMI
originalNum -> ID
= -> ASSIGN
num -> ID
; -> SEMI
for -> FOR
( -> LPAREN
originalNum -> ID
= -> ASSIGN
num -> ID
; -> SEMI
originalNum -> ID
!= -> NEQ
0 -> NUMBER
; -> SEMI
++ -> INC
n -> ID
) -> RPAREN
{ -> LBRACE
originalNum -> ID
/ -> DIV
= -> ASSIGN
10 -> NUMBER
; -> SEMI
} -> RBRACE
originalNum -> ID
= -> ASSIGN
num -> ID
; -> SEMI
for -> FOR
( -> LPAREN
originalNum -> ID
= -> ASSIGN
num -> ID
; -> SEMI
originalNum -> ID
!= -> NEQ
0 -> NUMBER
; -> SEMI
originalNum -> ID
/ -> DIV
= -> ASSIGN
10 -> NUMBER
) -> RPAREN
{ -> LBRACE
remainder -> ID
= -> ASSIGN
originalNum -> ID
% -> MOD
10 -> NUMBER
; -> SEMI
result -> ID
+ -> ADD
= -> ASSIGN
pow -> POW_FUNC
( -> LPAREN
remainder -> ID
, -> UNKNOWN
n -> ID
) -> RPAREN
; -> SEMI
} -> RBRACE
if -> IF
( -> LPAREN
( -> LPAREN
int -> INT
) -> RPAREN
result -> ID
== -> EQ
num -> ID
) -> RPAREN
printf -> PRINTF
( -> LPAREN
" -> UNKNOWN
% -> MOD
d -> ID
is -> ID
an -> ID
Armstrong -> ID
number -> ID
. -> UNKNOWN
" -> UNKNOWN
, -> UNKNOWN
num -> ID
) -> RPAREN
; -> SEMI
else -> ELSE
printf -> PRINTF
( -> LPAREN
" -> UNKNOWN
% -> MOD
d -> ID
is -> ID
not -> ID
an -> ID
Armstrong -> ID
number -> ID
. -> UNKNOWN
" -> UNKNOWN
, -> UNKNOWN
num -> ID
) -> RPAREN
; -> SEMI
return -> RETURN
0 -> NUMBER
; -> SEMI
} -> RBRACE
